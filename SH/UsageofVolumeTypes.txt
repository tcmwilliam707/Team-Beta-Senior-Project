Usage of Volume Types

volumes types are associated with Docker
Docker volumes are a folder that contain data from the container
There are 3 docker volume types

-Host
-Named 
-Anonymous

Volumes - Provides a list of allowed volume types. The allowable values correspond to the 
volume sources that are defined when creating a volume. For the complete list of volume types, 
see Types of Volumes. Additionally, * may be used to allow all volume types.

The recommended minimum set of allowed volumes for new PSPs are:

configMap
downwardAPI
emptyDir
persistentVolumeClaim
secret
projected

FSGroup - Controls the supplemental group applied to some volumes.

MustRunAs - Requires at least one range to be specified. Uses the minimum value of the first 
range as the default. Validates against all ranges.
MayRunAs - Requires at least one range to be specified. Allows FSGroups to be left unset 
without providing a default. Validates against all ranges if FSGroups is set.
RunAsAny - No default provided. Allows any fsGroup ID to be specified.

Kubernetes supported volumes:

 - awsElasticBlockStore
	must use EC2 pod
	An awsElasticBlockStore volume mounts an Amazon Web Services (AWS) EBS Volume into your Pod.
	Unlike emptyDir, which is erased when a Pod is removed, the contents of an EBS volume are
	preserved and the volume is merely unmounted. This means that an EBS volume can be 
	pre-populated with data, and that data can be "handed off" between Pods.
 - azureDisk
	A azureDisk is used to mount a Microsoft Azure Data Disk into a Pod.
 - azureFile
	A azureFile is used to mount a Microsoft Azure File Volume (SMB 2.1 and 3.0) into a Pod.
 - cephfs
	A cephfs volume allows an existing CephFS volume to be mounted into your Pod. Unlike emptyDir, 
	which is erased when a Pod is removed, the contents of a cephfs volume are preserved and the 
	volume is merely unmounted. This means that a CephFS volume can be pre-populated with data, 
	and that data can be "handed off" between Pods. CephFS can be mounted by multiple writers simultaneously.
 - cinder
	cinder is used to mount OpenStack Cinder Volume into your Pod.
 - configMap
	The configMap resource provides a way to inject configuration data into Pods. The data stored in a 
	ConfigMap object can be referenced in a volume of type configMap and then consumed by containerized 
	applications running in a Pod.
 - downwardAPI
	A downwardAPI volume is used to make downward API data available to applications. 
	It mounts a directory and writes the requested data in plain text files.
 - emptyDir
	scratch space, such as for a disk-based merge sort
	checkpointing a long computation for recovery from crashes
	holding files that a content-manager Container fetches while a webserver Container serves the data
 - fc (fibre channel)
	An fc volume allows an existing fibre channel volume to be mounted in a Pod. You can specify single 
	or multiple target World Wide Names using the parameter targetWWNs in your volume configuration. 
	If multiple WWNs are specified, targetWWNs expect that those WWNs are from multi-path connections.
 - felxVolume
	FlexVolume is an out-of-tree plugin interface that has existed in Kubernetes since version 1.2 (before CSI). 
	It uses an exec-based model to interface with drivers. FlexVolume driver binaries must be installed in a pre-defined 
	volume plugin path on each node (and in some cases master).
 - flocker
	Flocker is an open-source clustered Container data volume manager. It provides management and 
	orchestration of data volumes backed by a variety of storage backends.
 - gcePersistentDisk
	A gcePersistentDisk volume mounts a Google Compute Engine (GCE) Persistent Disk into your Pod. 
	Unlike emptyDir, which is erased when a Pod is removed, the contents of a PD are preserved and 
	the volume is merely unmounted. This means that a PD can be pre-populated with data, and that 
	data can be "handed off" between Pods.
 - gitRepo (deprecated)
	A gitRepo volume is an example of what can be done as a volume plugin. It mounts an empty directory
	and clones a git repository into it for your Pod to use. In the future, such volumes may be moved 
	to an even more decoupled model, rather than extending the Kubernetes API for every such use case.
 - glusterfs
	A glusterfs volume allows a Glusterfs (an open source networked filesystem) volume to be mounted 
	into your Pod. Unlike emptyDir, which is erased when a Pod is removed, the contents of a glusterfs 
	volume are preserved and the volume is merely unmounted. This means that a glusterfs volume can be 
	pre-populated with data, and that data can be "handed off" between Pods. GlusterFS can be mounted by 
	multiple writers simultaneously.
 - hostPath
	A hostPath volume mounts a file or directory from the host node's filesystem into your Pod. This is 
	not something that most Pods will need, but it offers a powerful escape hatch for some applications.
 - iscsi
	An iscsi volume allows an existing iSCSI (SCSI over IP) volume to be mounted into your Pod. Unlike 
	emptyDir, which is erased when a Pod is removed, the contents of an iscsi volume are preserved and 
	the volume is merely unmounted. This means that an iscsi volume can be pre-populated with data, 
	and that data can be "handed off" between Pods.
 - local
	A local volume represents a mounted local storage device such as a disk, partition or directory.
 - nfs
	An nfs volume allows an existing NFS (Network File System) share to be mounted into your Pod. 
	Unlike emptyDir, which is erased when a Pod is removed, the contents of an nfs volume are 
	preserved and the volume is merely unmounted. This means that an NFS volume can be pre-populated 
	with data, and that data can be "handed off" between Pods. NFS can be mounted by multiple 
	writers simultaneously.
 - persistentVolumeClaim
	-A persistentVolumeClaim volume is used to mount a PersistentVolume into a Pod. PersistentVolumeClaims 
	are a way for users to "claim" durable storage (such as a GCE PersistentDisk or an iSCSI volume) without 
	knowing the details of the particular cloud environment.
 - projected
	A projected volume maps several existing volume sources into the same directory.
	-secret
	-downwardAPI
	-configMap
	-serviceAccountToken
 - portwroxVolume
	A portworxVolume is an elastic block storage layer that runs hyperconverged with Kubernetes. Portworx 
	fingerprints storage in a server, tiers based on capabilities, and aggregates capacity across multiple 
	servers. Portworx runs in-guest in virtual machines or on bare metal Linux nodes.
 - quobyte
	A quobyte volume allows an existing Quobyte volume to be mounted into your Pod.
 - rbd
	An rbd volume allows a Rados Block Device volume to be mounted into your Pod. Unlike emptyDir, which is 
	erased when a Pod is removed, the contents of a rbd volume are preserved and the volume is merely unmounted. 
	This means that a RBD volume can be pre-populated with data, and that data can be "handed off" between Pods.
 - scaleIO
	ScaleIO is a software-based storage platform that can use existing hardware to create clusters of scalable 
	shared block networked storage. The scaleIO volume plugin allows deployed Pods to access existing ScaleIO 
	volumes (or it can dynamically provision new volumes for persistent volume claims, see ScaleIO Persistent Volumes).
 - secret
	A secret volume is used to pass sensitive information, such as passwords, to Pods. You can store secrets in the 
	Kubernetes API and mount them as files for use by Pods without coupling to Kubernetes directly. secret volumes 
	are backed by tmpfs (a RAM-backed filesystem) so they are never written to non-volatile storage.
 - storageos
	A storageos volume allows an existing StorageOS volume to be mounted into your Pod.
 - vsphereVolume
	A vsphereVolume is used to mount a vSphere VMDK Volume into your Pod. The contents of a volume are preserved 
	when it is unmounted. It supports both VMFS and VSAN datastore.

csi information:
	-Container Storage Interface (CSI) defines a standard interface for container orchestration systems 
(like Kubernetes) to expose arbitrary storage systems to their container workloads.
	-driver: A string value that specifies the name of the volume driver to use. This value must correspond 
to the value returned in the GetPluginInfoResponse by the CSI driver as defined in the CSI spec. It is 
used by Kubernetes to identify which CSI driver to call out to, and by CSI driver components to identify 
which PV objects belong to the CSI driver.
	-volumeHandle: A string value that uniquely identifies the volume. This value must correspond to the value returned 
in the volume.id field of the CreateVolumeResponse by the CSI driver as defined in the CSI spec. The value is passed as 
volume_id on all calls to the CSI volume driver when referencing the volume.
	-readOnly: An optional boolean value indicating whether the volume is to be "ControllerPublished" (attached) as read 
only. Default is false. This value is passed to the CSI driver via the readonly field in the ControllerPublishVolumeRequest.
	-fsType: If the PV's VolumeMode is Filesystem then this field may be used to specify the filesystem that should be 
used to mount the volume. If the volume has not been formatted and formatting is supported, this value will be used to format 
the volume. This value is passed to the CSI driver via the VolumeCapability field of ControllerPublishVolumeRequest, 
NodeStageVolumeRequest, and NodePublishVolumeRequest.
	-volumeAttributes: A map of string to string that specifies static properties of a volume. This map must correspond 
to the map returned in the volume.attributes field of the CreateVolumeResponse by the CSI driver as defined in the CSI spec. 
The map is passed to the CSI driver via the volume_context field in the ControllerPublishVolumeRequest, NodeStageVolumeRequest, 
and NodePublishVolumeRequest.
	-controllerPublishSecretRef: A reference to the secret object containing sensitive information to pass to the CSI driver 
to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no 
secret is required. If the secret object contains more than one secret, all secrets are passed.
	-nodeStageSecretRef: A reference to the secret object containing sensitive information to pass to the CSI driver to 
complete the CSI NodeStageVolume call. This field is optional, and may be empty if no secret is required. If the secret object 
contains more than one secret, all secrets are passed.
	-nodePublishSecretRef: A reference to the secret object containing sensitive information to pass to the CSI driver to 
complete the CSI NodePublishVolume call. This field is optional, and may be empty if no secret is required. If the secret object 
contains more than one secret, all secrets are passed.

- config file for aws volume as an example
 	---------------
	apiVersion: v1
	kind: Pod
	metadata:
  	  name: test-ebs
	spec:
  	  containers:
  	  - image: k8s.gcr.io/test-webserver
    	    name: test-container
    	    volumeMounts:
    	    - mountPath: /test-ebs
      	      name: test-volume
	  volumes:
  	  - name: test-volume
    	    # This AWS EBS volume must already exist.
   	    awsElasticBlockStore:
      		volumeID: <volume-id>
      		fsType: ext4

sources:
https://www.youtube.com/watch?v=p2PH_YPCsis
https://kubernetes.io/docs/concepts/storage/volumes/#:~:text=Kubernetes%20supports%20several%20types%20of,azureFile
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems